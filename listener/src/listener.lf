target C {
    files: ["../../include/manifest.h"],
    cmake-include: ["../../include/netchan.txt"],
    threading: true,
    keepalive: true,
}

preamble {=
    #include <stdlib.h>
    #include <netchan.h>
    #include "manifest.h"

    sensor_t *data;

    void *external(void *recvd) {
        if (!data)
            return NULL;
        nf_set_nic("enp2s0");
        nf_use_srp();

        NETCHAN_RX(sensor_data);

        sensor_t incoming_data;
        while (true && data) {
            READ_WAIT(sensor_data, &incoming_data);
            memcpy(data, &incoming_data, sizeof(incoming_data));
            // Notify reactor about new data
            lf_schedule(recvd, 0);
        }
    }
=}

main reactor {
    physical action recvd(0, 0, "replace"):uint64_t;
    state thread_id:lf_thread_t(0);

    reaction(startup) -> recvd {=
        data = calloc(1, sizeof(data));
        lf_thread_create(&self->thread_id, &external, recvd);
        printf("t1,t2,seqnr\n");
    =}

    reaction(shutdown) {=
        nh_destroy_standalone();
        if (data)
            free(data);
    =}

    reaction (recvd) {=
        data->t2 = lf_time_physical();
        if (data->t1 == -1) {
            printf("Stop received, closing\n");
            request_stop();
        } else {
            // We *assume* that data is available for us and that it safe to access.
            // (which we cannot as recvd is async and new data can arrive at *any* time)
            printf("%lu,%lu,%lu\n", data->t1, data->t2, data->seqnr);
        }
    =}
}
