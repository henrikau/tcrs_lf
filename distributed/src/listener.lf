target C {
    files: ["manifest.h"],
    cmake-include: ["netchan.txt"],
    threading: true,
    keepalive: true,
}

preamble {=
    #include <stdlib.h>
    #include <netchan.h>
    #include "manifest.h"

    sensor_t *data;

    void *external(void *recvd) {
        if (!data)
            return NULL;
        nf_set_nic("lo");
        NETCHAN_RX(sensor_data);
        
        printf("Starting loop, data=%p\n", data);
        sensor_t incoming_data;
        while (true && data) {
            READ(sensor_data, &incoming_data);
            memcpy(data, &incoming_data, sizeof(incoming_data));
            // Notify reactor about new data
            lf_schedule(recvd, 0);
        }
    }
=}

main reactor {
    physical action recvd(0, 0, "replace"):uint64_t;
    state thread_id:lf_thread_t(0);

    reaction(startup) -> recvd {=
        data = calloc(1, sizeof(data));
        lf_thread_create(&self->thread_id, &external, recvd);
    =}

    reaction(shutdown) {=
        nh_destroy_standalone();
        if (data)
            free(data);
    =}

    reaction (recvd) {=
        time_t ts = lf_time_physical();

        // We *assume* that data is available for us and that it safe to access.
        // (which we cannot as recvd is async and new data can arrive at *any* time)
        printf("[RECVD] data=%lu, capture_ts=%lu, local_delay=%lu, recvd_ts=%lu\n",
                data->data, data->ts, data->idel, ts);
        printf("[RECVD] delay: %.3f us\n", (double)(ts - data->ts)/1000.0);
    =}
}
