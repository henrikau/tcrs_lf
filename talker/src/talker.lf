target C {
    timeout: 60 secs,
    files: ["../../include/manifest.h"],
    cmake-include: ["../../include/netchan.txt"],
    threading: true,
    coordination: decentralized,
    keepalive: true,
}

preamble {=
    #include <netchan.h>
    #include "manifest.h"
    typedef struct netchan_avtp netchan_avtp_t;
=}

reactor Sensor {
    state ctr:uint64_t(0);
    output sensor_data:uint64_t;

    timer t(0, 100 msecs);
    reaction(t) -> sensor_data {=
        uint64_t sensor_val = self->ctr;
        self->ctr++;
        lf_set(sensor_data, sensor_val);
    =}
}

reactor TalkerOut {
    timer t(0, 1 sec);
    input sensor_data:uint64_t;
    state seqnr:uint64_t(0);
    state tx:netchan_avtp_t*;

    reaction(startup) {=
        nf_set_nic("enp2s0");
        nf_use_srp();
        self->tx = pdu_create_standalone("sensor_data", 1, net_fifo_chans, sizeof(net_fifo_chans));
    =}

    reaction(sensor_data) {=
        struct timespec ts_cpu = {0};
        uint64_t t1 = lf_time_physical();
        sensor_t sensor;
        sensor.t1 = t1;
        sensor.data = sensor_data;
        sensor.seqnr = self->seqnr;
        self->seqnr++;
        
        pdu_send_now(self->tx, &sensor);
    =}

    reaction(shutdown) {=
        sensor_t closemsg = {0};
        closemsg.t1 = -1;
        for (int i = 0; i < 5; i++) {
            pdu_send_now(self->tx, &closemsg);
            usleep(10000);
        }
        nh_destroy_standalone();
        printf("Talker and channel destroyed\n");
    =}
}

main reactor {
    talker = new TalkerOut();
    s = new Sensor();
    s.sensor_data -> talker.sensor_data;
}
