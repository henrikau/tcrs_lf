target C {
    timeout: 3 secs,
    files: ["../../include/manifest.h", "../../lib/Sensor.lf"],
    cmake-include: ["../../include/netchan.txt"],
    threading: true,
    coordination: decentralized,
    keepalive: true,
}

import Sensor from "../../lib/Sensor.lf"

preamble {=
    #include <netchan.h>
    #include "manifest.h"
    typedef struct netchan_avtp netchan_avtp_t;

=}

reactor TalkerOut {
    timer t(0, 1 sec);
    input sensor_data:sensor_t;
    state seqnr:uint64_t(0);
    state tx:netchan_avtp_t*;

    reaction(startup) {=
        nf_set_nic("enp7s0");
        self->tx = pdu_create_standalone("sensor_data", 1, net_fifo_chans, sizeof(net_fifo_chans));
        printf("t1,t2,t3,t4,seqnr\n");
    =}

    reaction(sensor_data) {=
        struct timespec ts_cpu = {0};
        uint64_t t2 = lf_time_physical();

        sensor_data->value.t2 = t2;
        sensor_data->value.seqnr = self->seqnr;
        self->seqnr++;
        
        pdu_send_now_wait(self->tx, &sensor_data->value);
        uint64_t t4 = lf_time_physical();
        
        printf("%lu,%lu,NaN,%lu,%lu\n", 
            sensor_data->value.t1, 
            sensor_data->value.t2, 
            t4,
            sensor_data->value.seqnr);
    =}
    reaction(shutdown) {=
        nh_destroy_standalone();
        printf("Talker and channel destroyed\n");
    =}
}

main reactor {
    talker = new TalkerOut();
    s = new Sensor();
    s.sensor_data -> talker.sensor_data;
}
